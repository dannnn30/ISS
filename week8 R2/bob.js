const crypto = require("crypto");

const bobPublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5z8TpJNgTlcm0k+e9ZT/
rT/920lgolRwO0+iy7yqRXAZDjxELpehQTLsQtaJ/UlXVwOwH0Zfz74SPM7EuJp/
iZRYehJ1ifdLsukm0qOcIJrjKJFmy+QGydLlbHX457kecKlTeqqrG0ekkLvHyKZk
9HbqUC/XKuwwiws/pKoZaeAZzrTgbJLJ5jeMgS0ADgUdZ8A8CA1c3pzmyzm+RU2t
YMzEhAvKygo7kukIH7+6myeWoBYRBpVwNqlKN72rkZ32u3mVNFLS063mKbDvzCN5
hWavMaLR0Dr5/H8UJGVQHybyPyAp/m/TaacZhv8dz+yzEbbrKEV0AYVSPGtZJa3Z
AQIDAQAB
-----END PUBLIC KEY-----`;
const bobPublicKey = crypto.createPublicKey(bobPublicKeyPem);

const bobPrivateKeyPem = `-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDnPxOkk2BOVybS
T571lP+tP/3bSWCiVHA7T6LLvKpFcBkOPEQul6FBMuxC1on9SVdXA7AfRl/PvhI8
zsS4mn+JlFh6EnWJ90uy6SbSo5wgmuMokWbL5AbJ0uVsdfjnuR5wqVN6qqsbR6SQ
u8fIpmT0dupQL9cq7DCLCz+kqhlp4BnOtOBsksnmN4yBLQAOBR1nwDwIDVzenObL
Ob5FTa1gzMSEC8rKCjuS6Qgfv7qbJ5agFhEGlXA2qUo3vauRnfa7eZU0UtLTreYp
sO/MI3mFZq8xotHQOvn8fxQkZVAfJvI/ICn+b9NppxmG/x3P7LMRtusoRXQBhVI8
a1klrdkBAgMBAAECggEADlsyIv4rSnHKrTUtjzLdif9Ls/jNkQZg+VhWU65g0R1x
JhsZDd4dWr4zQMBaTL6S4jS5Exf8DBpRaN5artiYoQ1JTjrQepeUZtpmrfO5APqH
WRYTJbFVt+M/RF6Gl2GSFuMhlZ9RhB4MhMJuWByhw947acMD6VxEdJK8NBgt/7lA
Zu0dk1ryRbyfATgUaVQanJEGSKo5eodr5jxLtCJf907R5RdAfSSrdh5BSrZ/2REM
TKBnaOf8E+kcWCwFWEkVtUJX8ESEp9nH3LttKjP6wh2gSWU2cIGM7pP4H9JMlfjo
85cy9LePzzuiCOyi5PatSye7vi5AMJS4M3Kt7Ymj4QKBgQD7VAiuqGll+Kwz2zhR
JGSkMV2MAUeyhQhsBIWz+sLixOqyWK/MYYNLqsJojyLfGtr9V02MtVlwC7fVBNyc
7MdOgrujMiwWWXCy4mI5TcRqEzaoKb+Gdb8TjiRpMcMTUseasAHk7zMwA8wMULi/
LBK7BXytniIeH/HpRqXcXIvu/QKBgQDri3tLiKYJfXLi/4cEJLJ46yf+JokgokI8
wj6isrDJ6nEIfD59Zc/Co4tKT3uZttt3fu8a/axFjdIGFd79gqq9TJRXxjkM/eHG
Wlqh1lhfTmzIYdpUAxwhJfCKaRByjohu+cdn7CMPRsQx4VUwMDtPjxQDMoMTguMZ
7BF98k8rVQKBgCfq4+ohs4PPqEIgOmSg3B87+/ilp2aSPJEzcqzwUg3EauZisaFL
h5f4CiKjQU2gLVH5kMadcxQZuFvsBsIh1VIB751u9ZOjJwQycplZYa3bWV4CK3pG
r0+CzwOqNKqYBj3qYJKk70NcBweZto4eiOcNaw0ERbT1K+36G5PRWyRdAoGANgtJ
3dnbpt/GxXi1xOiano3uHi0/V2KDaidzcacoUxvclYLUX7dFhTY7FnDIPkurbW6N
dBbyOP9CSi0ofehGPqrceos7udRiwj0nAG0K18tJwGxbSN1xzdVDrK5QnMhBW50p
+JlArhehmoRGJIlcgnOkttsXIhns+5yjos8/BQUCgYEA7QX4UDKjaB5O77T3MPIX
+h9TRPmXNZsTOLvbLThLlfTgzp4EtjDM73Q0Y9dnH3pWGtAil7ignMtkV+KMkavL
guHTsW4wPhQLS1gKH8qcY9LFc6ZSHg0/oY4NsAXQoHp62PHIcrC+63YC5zmg9mEM
LLGINx418/G3RxWpugTXtLg=
-----END PRIVATE KEY-----`;
const bobPrivateKey = crypto.createPrivateKey(bobPrivateKeyPem);

const alicePublicKeyPem = `-----BEGIN PUBLIC KEY-----
MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAmAMR/QPjCeGfkRM4V2xq
vdav09/GfGf1urAdJmW3PlK3R26ntckMXc6ecqJYZQkwmBFLqUHiWu5f9FtVbIQz
RUBjlFKcCjGJEHC2+4s2+TGcYR27cFKY/FhONUXbBMl1paOl6W1YJzK1cT7UYqzA
F+pzjX21KfSw57jacvaBxnu4QFf4yx4OVUGtuH9GoiRUD7zMZsyk4oy8WrgMdlNS
iVD48B7iQbcW/T6j/45KKDARW8HXNW2zFk+HaXkWb+cF5c37dKusuM9uiSZmLUZ5
d1ndFPcAFHvy33HClaotq40O6G1ZbAmYUHq0mRc5v7jD8j0ttkavmO7RKyBu6VDo
WwIDAQAB
-----END PUBLIC KEY-----`;
const alicePublicKey = crypto.createPublicKey(alicePublicKeyPem);

const ciphertextHex = "002ada6529aed765ebcf50a3baa35511aa51866db948e996413ea50cd957379dff451facf7250fe478d5bf931d164e407b69a67224c0a129911e5dccf31d4ffb679d3f0e3ceaa9be07ca010840710c70622a821081c493476e68cdfd7aff4a93ec829be48db95e04f10457ab6f32b5fc09022f913b8d2482f4167b2c996071a46edc2eff3ed186211e054f80e0a89a90479b3604b63f24401fd80147f8555a63d89a517ab648e2d5218a3f4b0de01ca2f9fd083b2e935182b1d53ec53481ca14eb8471999d1e991af05fb9899e68a0cf9606185c86250307852a099386326aafa028d0a99cef729af63bea7d33971d3a0496bf0e7e0e6020dc23cfa02dc74b01";
const ciphertext = Buffer.from(ciphertextHex, "hex");

const recoveredPlaintext = crypto.privateDecrypt(bobPrivateKey, ciphertext);
console.log("Recovered Plaintext:", recoveredPlaintext.toString("utf8"));

const signatureHex = "181b18186ffc2bba2e03447e68bb2f1155d1b4d2083c51c2e28c546e192e580dcb70d15b1fe8c22bfee3fafb45f0b59af9babf309c098e8bf9b8974450a7febeef76164ff7cb0181b2d386ddf1dc1031cef995f660fcdee967c443d6083f237b38f795af794314834a3ab27bf55b0d116b4f43571c8706e48322b483306fd145fdcfacc22b49a0bd2798ba17f46dc107ab9073a38b44e14526cdce53ca8ac78e0136bd3d524e29d7f63fb8d062132adcbce2e0de2ab2b5a4ec515865a0efb94919821bf4900c064b6d4e597e202adbc9046a747b73baca2915f46c69c3b07c8000df8ee15ab7847a3d5e8dcf0a02cf6d8c2624142876ef1f2996a4eb7133f32f";
const signature = Buffer.from(signatureHex, "hex");

const isValid = crypto.verify("sha256", recoveredPlaintext, alicePublicKey, signature);
console.log("RSA signature verified:", isValid);